/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC20CustodyNew,
  ERC20CustodyNewInterface,
} from "../../../../contracts/prototypes/evm/ERC20CustodyNew";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "WithdrawAndCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "WithdrawAndRevert",
    type: "event",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IGatewayEVM",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "withdrawAndCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "withdrawAndRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200108d3803806200108d833981810160405281019062000037919062000158565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000a6576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200018a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012082620000f3565b9050919050565b620001328162000113565b81146200013e57600080fd5b50565b600081519050620001528162000127565b92915050565b600060208284031215620001715762000170620000ee565b5b6000620001818482850162000141565b91505092915050565b610ef3806200019a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063116191b61461005157806321fc65f21461006f578063c8a023621461008b578063d9caed12146100a7575b600080fd5b6100596100c3565b6040516100669190610844565b60405180910390f35b61008960048036038101906100849190610942565b6100e9565b005b6100a560048036038101906100a09190610942565b61024b565b005b6100c160048036038101906100bc91906109ca565b6103ad565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6100f1610452565b61013e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848773ffffffffffffffffffffffffffffffffffffffff166104a19092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635131ab5986868686866040518663ffffffff1660e01b81526004016101a1959493929190610a99565b600060405180830381600087803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f85b5be9cf454e05e0bddf49315178102227c312078eefa3c00294fb4d912ae4e85858560405161023493929190610ae7565b60405180910390a3610244610527565b5050505050565b610253610452565b6102a0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848773ffffffffffffffffffffffffffffffffffffffff166104a19092919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8969bd486868686866040518663ffffffff1660e01b8152600401610303959493929190610a99565b600060405180830381600087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fb9d4efa96044e5f5e03e696fa9ae2ff66911cc27e8a637c3627c75bc5b2241c885858560405161039693929190610ae7565b60405180910390a36103a6610527565b5050505050565b6103b5610452565b6103e082828573ffffffffffffffffffffffffffffffffffffffff166104a19092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161043d9190610b19565b60405180910390a361044d610527565b505050565b600260005403610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e90610b91565b60405180910390fd5b6002600081905550565b6105228363a9059cbb60e01b84846040516024016104c0929190610bb1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610531565b505050565b6001600081905550565b6000610593826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105f89092919063ffffffff16565b90506000815111156105f357808060200190518101906105b39190610c12565b6105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990610cb1565b60405180910390fd5b5b505050565b60606106078484600085610610565b90509392505050565b606082471015610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c90610d43565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161067e9190610dd4565b60006040518083038185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b50915091506106d1878383876106dd565b92505050949350505050565b6060831561073f576000835103610737576106f785610752565b610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90610e37565b60405180910390fd5b5b82905061074a565b6107498383610775565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107885781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc9190610e9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061080a610805610800846107c5565b6107e5565b6107c5565b9050919050565b600061081c826107ef565b9050919050565b600061082e82610811565b9050919050565b61083e81610823565b82525050565b60006020820190506108596000830184610835565b92915050565b600080fd5b600080fd5b6000610874826107c5565b9050919050565b61088481610869565b811461088f57600080fd5b50565b6000813590506108a18161087b565b92915050565b6000819050919050565b6108ba816108a7565b81146108c557600080fd5b50565b6000813590506108d7816108b1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610902576109016108dd565b5b8235905067ffffffffffffffff81111561091f5761091e6108e2565b5b60208301915083600182028301111561093b5761093a6108e7565b5b9250929050565b60008060008060006080868803121561095e5761095d61085f565b5b600061096c88828901610892565b955050602061097d88828901610892565b945050604061098e888289016108c8565b935050606086013567ffffffffffffffff8111156109af576109ae610864565b5b6109bb888289016108ec565b92509250509295509295909350565b6000806000606084860312156109e3576109e261085f565b5b60006109f186828701610892565b9350506020610a0286828701610892565b9250506040610a13868287016108c8565b9150509250925092565b610a2681610869565b82525050565b610a35816108a7565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610a788385610a3b565b9350610a85838584610a4c565b610a8e83610a5b565b840190509392505050565b6000608082019050610aae6000830188610a1d565b610abb6020830187610a1d565b610ac86040830186610a2c565b8181036060830152610adb818486610a6c565b90509695505050505050565b6000604082019050610afc6000830186610a2c565b8181036020830152610b0f818486610a6c565b9050949350505050565b6000602082019050610b2e6000830184610a2c565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610b7b601f83610b34565b9150610b8682610b45565b602082019050919050565b60006020820190508181036000830152610baa81610b6e565b9050919050565b6000604082019050610bc66000830185610a1d565b610bd36020830184610a2c565b9392505050565b60008115159050919050565b610bef81610bda565b8114610bfa57600080fd5b50565b600081519050610c0c81610be6565b92915050565b600060208284031215610c2857610c2761085f565b5b6000610c3684828501610bfd565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610c9b602a83610b34565b9150610ca682610c3f565b604082019050919050565b60006020820190508181036000830152610cca81610c8e565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610d2d602683610b34565b9150610d3882610cd1565b604082019050919050565b60006020820190508181036000830152610d5c81610d20565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610d97578082015181840152602081019050610d7c565b60008484015250505050565b6000610dae82610d63565b610db88185610d6e565b9350610dc8818560208601610d79565b80840191505092915050565b6000610de08284610da3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610e21601d83610b34565b9150610e2c82610deb565b602082019050919050565b60006020820190508181036000830152610e5081610e14565b9050919050565b600081519050919050565b6000610e6d82610e57565b610e778185610b34565b9350610e87818560208601610d79565b610e9081610a5b565b840191505092915050565b60006020820190508181036000830152610eb58184610e62565b90509291505056fea26469706673582212206417502088627c24fee75ce394a0c54627bb49f071090ad393ae6b079615fd4b64736f6c63430008120033";

type ERC20CustodyNewConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20CustodyNewConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20CustodyNew__factory extends ContractFactory {
  constructor(...args: ERC20CustodyNewConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gateway: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20CustodyNew> {
    return super.deploy(_gateway, overrides || {}) as Promise<ERC20CustodyNew>;
  }
  override getDeployTransaction(
    _gateway: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gateway, overrides || {});
  }
  override attach(address: string): ERC20CustodyNew {
    return super.attach(address) as ERC20CustodyNew;
  }
  override connect(signer: Signer): ERC20CustodyNew__factory {
    return super.connect(signer) as ERC20CustodyNew__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20CustodyNewInterface {
    return new utils.Interface(_abi) as ERC20CustodyNewInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20CustodyNew {
    return new Contract(address, _abi, signerOrProvider) as ERC20CustodyNew;
  }
}
