/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AttackerContract,
  AttackerContractInterface,
} from "../../../../../contracts/evm/testing/AttackerContract.sol/AttackerContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "victimContractAddress_",
        type: "address",
      },
      {
        internalType: "address",
        name: "wzeta",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "victimMethod",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "victimContractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620009c0380380620009c08339818101604052810190620000379190620001f0565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620000f49291906200026e565b6020604051808303816000875af115801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620002d8565b50806001819055505050506200030a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017d8262000150565b9050919050565b6200018f8162000170565b81146200019b57600080fd5b50565b600081519050620001af8162000184565b92915050565b6000819050919050565b620001ca81620001b5565b8114620001d657600080fd5b50565b600081519050620001ea81620001bf565b92915050565b6000806000606084860312156200020c576200020b6200014b565b5b60006200021c868287016200019e565b93505060206200022f868287016200019e565b92505060406200024286828701620001d9565b9150509250925092565b620002578162000170565b82525050565b6200026881620001b5565b82525050565b60006040820190506200028560008301856200024c565b6200029460208301846200025d565b9392505050565b60008115159050919050565b620002b2816200029b565b8114620002be57600080fd5b50565b600081519050620002d281620002a7565b92915050565b600060208284031215620002f157620002f06200014b565b5b60006200030184828501620002c1565b91505092915050565b6106a6806200031a6000396000f3fe6080604052600436106100435760003560e01c806323b872dd1461004f57806370a082311461008c57806389bc0bb7146100c9578063a9059cbb146100f45761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061038c565b610131565b60405161008391906103fa565b60405180910390f35b34801561009857600080fd5b506100b360048036038101906100ae9190610415565b610146565b6040516100c09190610451565b60405180910390f35b3480156100d557600080fd5b506100de610159565b6040516100eb919061047b565b60405180910390f35b34801561010057600080fd5b5061011b60048036038101906101169190610496565b61017d565b60405161012891906103fa565b60405180910390f35b600061013b610191565b600190509392505050565b6000610150610191565b60009050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610187610191565b6001905092915050565b60018054036101a7576101a26101bd565b6101bb565b6002600154036101ba576101b961024d565b5b5b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e609055e3060006040518363ffffffff1660e01b81526004016102199291906105ea565b600060405180830381600087803b15801561023357600080fd5b505af1158015610247573d6000803e3d6000fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9caed1273f39fd6e51aad88f6f4ce6ab8827279cfffb922663060006040518463ffffffff1660e01b81526004016102bf93929190610639565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610323826102f8565b9050919050565b61033381610318565b811461033e57600080fd5b50565b6000813590506103508161032a565b92915050565b6000819050919050565b61036981610356565b811461037457600080fd5b50565b60008135905061038681610360565b92915050565b6000806000606084860312156103a5576103a46102f3565b5b60006103b386828701610341565b93505060206103c486828701610341565b92505060406103d586828701610377565b9150509250925092565b60008115159050919050565b6103f4816103df565b82525050565b600060208201905061040f60008301846103eb565b92915050565b60006020828403121561042b5761042a6102f3565b5b600061043984828501610341565b91505092915050565b61044b81610356565b82525050565b60006020820190506104666000830184610442565b92915050565b61047581610318565b82525050565b6000602082019050610490600083018461046c565b92915050565b600080604083850312156104ad576104ac6102f3565b5b60006104bb85828601610341565b92505060206104cc85828601610377565b9150509250929050565b600082825260208201905092915050565b7f307866333946643665353161616438384636463463653661423838323732373960008201527f6366664662393232363600000000000000000000000000000000000000000000602082015250565b6000610543602a836104d6565b915061054e826104e7565b604082019050919050565b6000819050919050565b6000819050919050565b600061058861058361057e84610559565b610563565b610356565b9050919050565b6105988161056d565b82525050565b7f3078303000000000000000000000000000000000000000000000000000000000600082015250565b60006105d46004836104d6565b91506105df8261059e565b602082019050919050565b6000608082019050818103600083015261060381610536565b9050610612602083018561046c565b61061f604083018461058f565b8181036060830152610630816105c7565b90509392505050565b600060608201905061064e600083018661046c565b61065b602083018561046c565b610668604083018461058f565b94935050505056fea2646970667358221220943f3151228e420931d924868bd3ccdf701124b7f9634f27db25805720ac962b64736f6c63430008120033";

type AttackerContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackerContract__factory extends ContractFactory {
  constructor(...args: AttackerContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    victimContractAddress_: PromiseOrValue<string>,
    wzeta: PromiseOrValue<string>,
    victimMethod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackerContract> {
    return super.deploy(
      victimContractAddress_,
      wzeta,
      victimMethod,
      overrides || {}
    ) as Promise<AttackerContract>;
  }
  override getDeployTransaction(
    victimContractAddress_: PromiseOrValue<string>,
    wzeta: PromiseOrValue<string>,
    victimMethod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      victimContractAddress_,
      wzeta,
      victimMethod,
      overrides || {}
    );
  }
  override attach(address: string): AttackerContract {
    return super.attach(address) as AttackerContract;
  }
  override connect(signer: Signer): AttackerContract__factory {
    return super.connect(signer) as AttackerContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerContractInterface {
    return new utils.Interface(_abi) as AttackerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackerContract {
    return new Contract(address, _abi, signerOrProvider) as AttackerContract;
  }
}
